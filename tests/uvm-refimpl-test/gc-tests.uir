.typedef @i8 = int<8>
.typedef @i16 = int<16>
.typedef @i32 = int<32>
.typedef @i64 = int<64>
.typedef @float = float
.typedef @double = double

.typedef @void = void

.funcsig @noparamsnoret = @void ()

.typedef @funcdumb = funcref<@noparamsnoret>

.typedef @thread = threadref
.typedef @stack = stackref
.typedef @tagref64 = tagref64

.const @TRUE <@i64> = 1
.const @FALSE <@i64> = 0

.const @I32_0 <@i32> = 0
.const @I32_1 <@i32> = 1
.const @I32_2 <@i32> = 2
.const @I32_3 <@i32> = 3
.const @I32_4 <@i32> = 4
.const @I32_5 <@i32> = 5
.const @I32_6 <@i32> = 6
.const @I32_7 <@i32> = 7

.const @I64_0 <@i64> = 0
.const @I64_1 <@i64> = 1
.const @I64_2 <@i64> = 2
.const @I64_3 <@i64> = 3
.const @I64_4 <@i64> = 4
.const @I64_5 <@i64> = 5
.const @I64_6 <@i64> = 6
.const @I64_7 <@i64> = 7
.const @I64_42 <@i64> = 42
.const @I64_1024 <@i64> = 1024
.const @I64_30000 <@i64> = 30000

.const @F_0 <@float> = 0.0f
.const @F_1 <@float> = 1.0f
.const @F_2 <@float> = 2.0f
.const @F_3 <@float> = 3.0f
.const @F_4 <@float> = 4.0f
.const @F_5 <@float> = 5.0f
.const @F_6 <@float> = 6.0f
.const @F_7 <@float> = 7.0f

.const @D_0 <@double> = 0.0d
.const @D_1 <@double> = 1.0d
.const @D_2 <@double> = 2.0d
.const @D_3 <@double> = 3.0d
.const @D_4 <@double> = 4.0d
.const @D_5 <@double> = 5.0d
.const @D_6 <@double> = 6.0d
.const @D_7 <@double> = 7.0d

.funcsig @i_ii = @i64 (@i64 @i64)

.typedef @refvoid = ref<@void>
.typedef @irefvoid = iref<@void>
.typedef @weakrefvoid = weakref<@void>
.const @NULLREF <@refvoid> = NULL

.const @VOID <@void> = NULL

.typedef @StructFoo = struct <@i32 @i64 @float @double>

.const @STRUCT_FOO <@StructFoo> = {@I32_1 @I64_2 @F_3 @D_4}

.typedef @refi64 = ref<@i64>
.typedef @irefi64 = iref<@i64>
.typedef @weakrefi64 = weakref<@i64>

.typedef @StructBar = struct <
    @i64 @i32 @i16 @i8 @float @double
    @refi64 @irefi64 @weakrefi64
>

.typedef @refBar = ref<@StructBar>
.typedef @irefBar = iref<@StructBar>

.typedef @hCharArray = hybrid<@i64 @i8>

.typedef @ArrayBaz = array <@i16 1024>

.typedef @JavaLikeByteArray = hybrid <@i32 @i8>

.global @g_i8   <@i8>
.global @g_i16  <@i16>
.global @g_i32  <@i32>
.global @g_i64  <@i64>
.global @g_f    <@float>
.global @g_d    <@double>
.global @g_r    <@refvoid>
.global @g_ir   <@irefvoid>
.global @g_wr   <@weakrefvoid>
    
.global @g_func <@funcdumb>
    
.global @g_thr  <@thread>
.global @g_sta  <@stack>
.global @g_tr64 <@tagref64>

.const @RI64_NULL <@refi64> = NULL

.global @g_refi64 <@refi64>

.funcdef @keepglobal VERSION @keepglobal_v1 <@noparamsnoret> {
    %entry():
        CALL <@noparamsnoret> @storeglobal ()
        
        %gctrap = TRAP <@void>
        %obj2 = LOAD <@refi64> @g_refi64
        %obj2iref = GETIREF <@i64> %obj2
        %obj2val = LOAD <@i64> %obj2iref
        
        %checktrap = TRAP <@void> KEEPALIVE (%obj2 %obj2val)

        STORE <@refi64> @g_refi64 @RI64_NULL

        COMMINST @uvm.thread_exit
}

.funcdef @storeglobal VERSION @storeglobal_v1 <@noparamsnoret> {
    %entry():
        %obj = NEW <@i64>
        STORE <@refi64> @g_refi64 %obj
        %iref = GETIREF <@i64> %obj
        STORE <@i64> %iref @I64_42
        RET @VOID
}

.funcdef @nokeepalloca VERSION @nokeepalloca_v1 <@noparamsnoret> {
    %entry():
        CALL <@noparamsnoret> @allocatest ()
        
        %gctrap = TRAP <@void>
        COMMINST @uvm.thread_exit
}

.funcdef @allocatest VERSION @allocatest_v1 <@noparamsnoret> {
    %entry():
        %alloca = ALLOCA <@refi64>
        
        CALL <@allocasettersig> @allocasetter (%alloca)
        
        %gctrap = TRAP <@void>
        RET @VOID
}

.funcsig @allocasettersig = @void (@irefi64)

.funcdef @allocasetter VERSION @allocasetter_v1 <@allocasettersig> {
    %entry(<@irefi64> %ir):
        %obj = NEW <@i64>
        %iref = GETIREF <@i64> %obj
        STORE <@i64> %iref @I64_42

        STORE <@refi64> %ir %obj
        
        RET @VOID
}

.const @CRAZY_ALLOC_COUNT <@i64> = 1000

.funcdef @crazy_allocator VERSION @crazy_allocator_v1 <@noparamsnoret> {
    %entry():
        BRANCH %head(@CRAZY_ALLOC_COUNT)
        
    %head(<@i64> %togo):
        %nz = NE <@i64> %togo @I64_0
        BRANCH2 %nz %body(%togo) %exit()

    %body(<@i64> %togo):
        NEWHYBRID <@hCharArray @i64> @I64_30000
        %togo2 = SUB <@i64> %togo @I64_1
        BRANCH %head(%togo2)

    %exit():
        RET @VOID
}

.funcdef @crazy_allocation_test VERSION @crazy_allocation_test_v1 <@noparamsnoret> {
    %entry():
        CALL <@noparamsnoret> @crazy_allocator ()
        COMMINST @uvm.thread_exit
}

.typedef @refi64array = hybrid <@void @refi64>

.const @REM_SZ <@i64> = 2000
.const @REM_PER_ALLOC <@i64> = 100000
.const @NALLOCS <@i64> = 1000000

// Retain one object per @REM_SZ objects. Testing defragmentation
.funcdef @breadcrumbs VERSION @breadcrumbs_v1 <@noparamsnoret> {
    %entry():
        %remember = NEWHYBRID <@refi64array @i64> @REM_SZ
        %rememberiref = GETIREF <@refi64array> %remember
        %remv = GETVARPARTIREF <@refi64array> %rememberiref
        
        BRANCH %head(@I64_0 @I64_0 %remv)
        
    %head(<@i64> %i <@i64> %nrem <@irefi64> %remv):
        %enough = SLT <@i64> %i @NALLOCS
        BRANCH2 %enough %body(%i %nrem %remv) %exit()

    %body(<@i64> %i <@i64> %nrem <@irefi64> %remv):
        %obj = NEW <@i64>
        %rem = SREM <@i64> %i @REM_PER_ALLOC
        %z = EQ <@i64> %rem @I64_0
        BRANCH2 %z %body2(%i %nrem %remv %obj) %next(%i %nrem %remv)

    %body2(<@i64> %i <@i64> %nrem <@irefi64> %remv <@refi64> %obj):
        %loc = SHIFTIREF <@refi64 @i64> %remv %nrem
        STORE <@refi64> %loc %obj
        %nrem2 = ADD <@i64> %nrem @I64_1
        BRANCH %next(%i %nrem2 %remv)
        
    %next(<@i64> %i <@i64> %nrem <@irefi64> %remv):
        %i2 = ADD <@i64> %i @I64_1
        BRANCH %head(%i2 %nrem %remv)

    %exit():
        COMMINST @uvm.thread_exit
}

.typedef @WRI64Cell = iref<@weakrefi64>

.funcsig @makestorewri64sig = @void (@WRI64Cell)

.funcdef @makestorewri64 VERSION @makestorewri64_v1 <@makestorewri64sig> {
    %entry(<@WRI64Cell> %cell):
        %ri64 = NEW <@i64>
        %iri64 = GETIREF <@i64> %ri64
        STORE <@i64> %iri64 @I64_42
        STORE <@weakrefi64> %cell %ri64
        RET @VOID
}

.funcdef @peekweakref VERSION @peekweakref_v1 <@makestorewri64sig> {
    %entry(<@WRI64Cell> %cell):
        %refval = LOAD <@weakrefi64> %cell
        %checknztrap = TRAP <@void> KEEPALIVE (%refval)
        RET @VOID
}

.funcdef @testweakref VERSION @testweakref_v1 <@noparamsnoret> {
    %entry():
        %irwr = ALLOCA <@weakrefi64>
        CALL <@makestorewri64sig> @makestorewri64 (%irwr)
        CALL <@makestorewri64sig> @peekweakref (%irwr)
        
        %gctrap = TRAP <@void>
        
        %refval = LOAD <@weakrefi64> %irwr
        %checkztrap = TRAP <@void> KEEPALIVE (%refval)

        COMMINST @uvm.thread_exit
}

.typedef @i6 = int<6>

.const @I6_13 <@i6> = 13

.funcsig @maketr64intref_sig = @tagref64 ()

.funcdef @maketr64intref VERSION @maketr64intref_v1 <@maketr64intref_sig> {
    %entry():
        %refi64 = NEW <@i64>
        %irefi64 = GETIREF <@i64> %refi64
        STORE <@i64> %irefi64 @I64_42
        %refv = REFCAST <@refi64 @refvoid> %refi64
        %tr = COMMINST @uvm.tr64.from_ref (%refv @I6_13)
        RET %tr
}

.funcdef @testtagrefgc VERSION @testtagrefgc_v1 <@noparamsnoret> {
    %entry():
        %tr = CALL <@maketr64intref_sig> @maketr64intref ()

        %gctrap = TRAP <@void>

        %refv = COMMINST @uvm.tr64.to_ref(%tr)
        %tagv = COMMINST @uvm.tr64.to_tag(%tr)

        %refi = REFCAST <@refvoid @refi64> %refv
        %irefi = GETIREF <@i64> %refi
        %iv = LOAD <@i64> %irefi

        %checktrap = TRAP <@void> KEEPALIVE (%tr %refv %tagv %iv)

        COMMINST @uvm.thread_exit
}

.typedef @ireftr64 = iref<@tagref64>

.funcsig @settr64intref_sig = @void (@ireftr64)
.funcdef @settr64intref VERSION @settr64intref_v1 <@settr64intref_sig> {
    %entry(<@ireftr64> %ireftr64):
        %refi64 = NEW <@i64>
        %irefi64 = GETIREF <@i64> %refi64
        STORE <@i64> %irefi64 @I64_42
        %refv = REFCAST <@refi64 @refvoid> %refi64
        %tr = COMMINST @uvm.tr64.from_ref (%refv @I6_13)
        
        STORE <@tagref64> %ireftr64 %tr
        RET @VOID
}

.funcdef @testtagrefgcmem VERSION @testtagrefgcmem_v1 <@noparamsnoret> {
    %entry():
        %ireftr64 = ALLOCA <@tagref64>
        CALL <@settr64intref_sig> @settr64intref (%ireftr64)
        %gctrap = TRAP <@void>
        
        %tr = LOAD <@tagref64> %ireftr64
        %refv = COMMINST @uvm.tr64.to_ref(%tr)
        %tagv = COMMINST @uvm.tr64.to_tag(%tr)
        %refi = REFCAST <@refvoid @refi64> %refv
        %irefi = GETIREF <@i64> %refi
        %iv = LOAD <@i64> %irefi
        %checktrap = TRAP <@void> KEEPALIVE (%tr %refv %tagv %iv)

        COMMINST @uvm.thread_exit
}


.typedef @tr64array = hybrid <@void @tagref64>

.funcdef @breadcrumbstr64 VERSION @breadcrumbstr64_v1 <@noparamsnoret> {
    %entry():
        %remember = NEWHYBRID <@tr64array @i64> @REM_SZ
        %rememberiref = GETIREF <@tr64array> %remember
        %remv = GETVARPARTIREF <@tr64array> %rememberiref
        
        BRANCH %head(@I64_0 @I64_0 %remv)
        
    %head(<@i64> %i <@i64> %nrem <@irefi64> %remv):
        %enough = SLT <@i64> %i @NALLOCS
        BRANCH2 %enough %body(%i %nrem %remv) %exit()

    %body(<@i64> %i <@i64> %nrem <@irefi64> %remv):
        %obj = NEW <@i64>
        %rem = SREM <@i64> %i @REM_PER_ALLOC
        %z = EQ <@i64> %rem @I64_0
        BRANCH2 %z %body2(%i %nrem %remv %obj) %next(%i %nrem %remv)

    %body2(<@i64> %i <@i64> %nrem <@irefi64> %remv <@refi64> %obj):
        %loc = SHIFTIREF <@tagref64 @i64> %remv %nrem
        %objv = REFCAST <@refi64 @refvoid> %obj
        %tr = COMMINST @uvm.tr64.from_ref(%objv @I6_13)
        STORE <@tagref64> %loc %tr
        %nrem2 = ADD <@i64> %nrem @I64_1
        BRANCH %next(%i %nrem2 %remv)
        
    %next(<@i64> %i <@i64> %nrem <@irefi64> %remv):
        %i2 = ADD <@i64> %i @I64_1
        BRANCH %head(%i2 %nrem %remv)

    %exit():
        COMMINST @uvm.thread_exit()
}

.funcdef @emptystack VERSION @emptystack_v1 <@noparamsnoret> {
    %entry():
        RET @VOID
}

.funcsig @stackcollecttest_sig = @void (@i64)
.funcdef @stackcollecttest VERSION @stackcollecttest_v1 <@stackcollecttest_sig> {
    %entry(<@i64> %nstacks):
        BRANCH %head(%nstacks @I64_0)

    %head(<@i64> %nstacks <@i64> %i):
        %lt = SLT <@i64> %i %nstacks
        BRANCH2 %lt %body(%nstacks %i) %endloop()

    %body(<@i64> %nstacks <@i64> %i):
        %st = NEWSTACK <@noparamsnoret> @emptystack ()
        %i2 = ADD <@i64> %i @I64_1
        BRANCH %head(%nstacks %i2)

    %endloop():
        %trap = TRAP <@void>
        COMMINST @uvm.thread_exit()
}
