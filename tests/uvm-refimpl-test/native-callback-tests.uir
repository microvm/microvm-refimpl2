.typedef @i1 = int<1>
.typedef @i6 = int<6>
.typedef @i8 = int<8>
.typedef @i16 = int<16>
.typedef @i32 = int<32>
.typedef @i52 = int<52>
.typedef @i64 = int<64>
.typedef @float = float
.typedef @double = double

.typedef @void = void

.funcsig @noparamsnoret = @void ()

.typedef @funcdumb = func<@noparamsnoret>

.typedef @thread = thread
.typedef @stack = stack
.typedef @tagref64 = tagref64

.const @TRUE <@i64> = 1
.const @FALSE <@i64> = 0

.const @I32_0 <@i32> = 0
.const @I32_1 <@i32> = 1
.const @I32_2 <@i32> = 2
.const @I32_3 <@i32> = 3
.const @I32_4 <@i32> = 4
.const @I32_5 <@i32> = 5
.const @I32_6 <@i32> = 6
.const @I32_7 <@i32> = 7

.const @I64_0 <@i64> = 0
.const @I64_1 <@i64> = 1
.const @I64_2 <@i64> = 2
.const @I64_3 <@i64> = 3
.const @I64_4 <@i64> = 4
.const @I64_5 <@i64> = 5
.const @I64_6 <@i64> = 6
.const @I64_7 <@i64> = 7

.const @F_0 <@float> = 0.0f
.const @F_1 <@float> = 1.0f
.const @F_2 <@float> = 2.0f
.const @F_3 <@float> = 3.0f
.const @F_4 <@float> = 4.0f
.const @F_5 <@float> = 5.0f
.const @F_6 <@float> = 6.0f
.const @F_7 <@float> = 7.0f

.const @D_0 <@double> = 0.0d
.const @D_1 <@double> = 1.0d
.const @D_2 <@double> = 2.0d
.const @D_3 <@double> = 3.0d
.const @D_4 <@double> = 4.0d
.const @D_5 <@double> = 5.0d
.const @D_6 <@double> = 6.0d
.const @D_7 <@double> = 7.0d

.typedef @4xfloat  = vector <@float 4>
.typedef @4xi32    = vector <@i32 4>
.typedef @2xdouble = vector <@double 2>

.const @4xI32_V1 <@4xi32> = VEC {@I32_0 @I32_1 @I32_2 @I32_3}
.const @4xI32_V2 <@4xi32> = VEC {@I32_4 @I32_5 @I32_6 @I32_7}

.const @4xF_V1 <@4xfloat> = VEC {@F_0 @F_1 @F_2 @F_3}
.const @4xF_V2 <@4xfloat> = VEC {@F_4 @F_5 @F_6 @F_7}

.const @2xD_V1 <@2xdouble> = VEC {@D_0 @D_1}
.const @2xD_V2 <@2xdouble> = VEC {@D_2 @D_3}

.funcsig @i_i = @i64 (@i64)
.funcsig @i_ii = @i64 (@i64 @i64)

.typedef @refvoid = ref<@void>
.typedef @irefvoid = iref<@void>
.typedef @weakrefvoid = weakref<@void>
.const @NULLREF   <@refvoid>  = NULL
.const @NULLIREF  <@irefvoid> = NULL
.const @NULLFUNC  <@funcdumb> = NULL
.const @NULLSTACK <@stack>    = NULL

.typedef @refi8     = ref<@i8>
.typedef @refi16    = ref<@i16>
.typedef @refi32    = ref<@i32>
.typedef @refi64    = ref<@i64>
.typedef @reffloat  = ref<@float>
.typedef @refdouble = ref<@double>
.typedef @irefi8    = iref<@i8>
.typedef @irefi16   = iref<@i16>
.typedef @irefi32   = iref<@i32>
.typedef @irefi64   = iref<@i64>
.typedef @ireffloat = iref<@float>
.typedef @irefdouble= iref<@double>
.const @NULLREF_I64  <@refi64>  = NULL
.const @NULLIREF_I64 <@irefi64> = NULL

.typedef @ptrvoid   = ptr<@void>
.typedef @ptri8     = ptr<@i8>
.typedef @ptri16    = ptr<@i16>
.typedef @ptri32    = ptr<@i32>
.typedef @ptri64    = ptr<@i64>
.typedef @ptrfloat  = ptr<@float>
.typedef @ptrdouble = ptr<@double>
.typedef @ptrptrvoid = ptr<@ptrvoid>
.typedef @ptrfpnoparamsnoret = ptr<@fpnoparamsnoret>
.typedef @ptrfpi_i  = ptr<@fpi_i>

.typedef @fpnoparamsnoret = funcptr<@noparamsnoret>
.typedef @fpi_i = funcptr<@i_i>
.typedef @fpi_ii = funcptr<@i_ii>

.funcsig @v_a = @void (@i64)

.funcsig @getpid_sig = @i32 ()
.typedef @getpid_fp  = funcptr<@getpid_sig>

.funcdef @getpidtest VERSION @getpidtest_v1 <@v_a> (%p0) {
    %entry:
        %fp = PTRCAST <@i64 @getpid_fp> %p0
        %rv = CCALL #DEFAULT <@getpid_fp @getpid_sig> %fp ()

        %trap = TRAP <@void> KEEPALIVE (%fp %rv)
        COMMINST @uvm.thread_exit
}

.typedef @size_t = int<64>
.funcsig @write_sig = @size_t (@i32 @ptrvoid @size_t)
.typedef @write_fp  = funcptr<@write_sig>

.typedef @CharBuf = hybrid<@i64 @i8>
.const @I8_H  <@i8> = 0x48
.const @I8_e  <@i8> = 0x65
.const @I8_l  <@i8> = 0x6c
.const @I8_o  <@i8> = 0x6f
.const @I8_NL <@i8> = 0x0a

.funcsig @DoubleToDouble.sig = @double (@double)
.typedef @DoubleToDouble.fp  = funcptr<@DoubleToDouble.sig>

.funcsig @one_level.sig = @double (@double @DoubleToDouble.fp)
.typedef @one_level.fp  = funcptr<@one_level.sig>

.funcdef @square VERSION @square.v1 <@DoubleToDouble.sig> (%value) {
    %entry:
        %cok = COMMINST @uvm.native.get_cookie
        %rv = FMUL <@double> %value %value
        %trap = TRAP <@void> KEEPALIVE (%value %cok)
        RET <@double> %rv
}

.const @I64_42 <@i64> = 42

.expose @square.exposed = @square #DEFAULT @I64_42

.global @one_level.global <@one_level.fp>

.funcdef @one_level_test VERSION @one_level_test.v1 <@noparamsnoret> () {
    %entry:
        %fp = LOAD <@one_level.fp> @one_level.global
        %pretrap = TRAP <@void> KEEPALIVE (%fp)
        %rv = CCALL #DEFAULT <@one_level.fp @one_level.sig> %fp (@D_3 @square.exposed)

        %trap = TRAP <@void> KEEPALIVE (%fp %rv)
        COMMINST @uvm.thread_exit
}
