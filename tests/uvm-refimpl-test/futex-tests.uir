// require "primitives.uir"

.global @shared_value1 <@i64>
.global @shared_value2 <@i64>
.global @the_futex <@i32>

.const @I64_42 <@i64> = 42

.funcdef @futex_waiter VERSION @futex_waiter_v1 <@v_v> {
    %entry():
        %rv = COMMINST @uvm.futex.wait <@i32> (@the_futex @I32_0)
        %sv = LOAD <@i64> @shared_value1

        [%trap_waiter] TRAP <> KEEPALIVE(%rv %sv)
        COMMINST @uvm.thread_exit
}

.funcdef @futex_setter VERSION @futex_setter_v1 <@v_v> {
    %entry():
        STORE <@i64> @shared_value1 @I64_0
        STORE <@i64> @shared_value2 @I64_0
        STORE <@i32> @the_futex @I32_0

        %ns = COMMINST @uvm.new_stack <[@v_v]> (@futex_waiter)
        %nt = NEWTHREAD %ns PASS_VALUES <> ()

        STORE <@i64> @shared_value1 @I64_42

        BRANCH %wait_body()

    %wait_body():
        %nwakes = COMMINST @uvm.futex.wake <@i32> (@the_futex @I32_1)
        %is_1 = EQ <@i32> %nwakes @I32_1
        BRANCH2 %is_1 %wait_exit() %wait_body()

    %wait_exit():
        [%trap_setter] TRAP <>
        COMMINST @uvm.thread_exit
}

.const @I64_ONE_SECOND <@i64> = 1000000000

.funcdef @futex_delayer VERSION @futex_delayer_v1 <@v_v> {
    %entry():
        STORE <@i32> @the_futex @I32_0
        %rv = COMMINST @uvm.futex.wait_timeout <@i32> (@the_futex @I32_0 @I64_ONE_SECOND)
        [%trap_delayer] TRAP <> KEEPALIVE(%rv)
        COMMINST @uvm.thread_exit
}

.funcdef @futex_no_sleep VERSION @futex_no_sleep_v1 <@v_v> {
    %entry():
        STORE <@i32> @the_futex @I32_0
        %rv = COMMINST @uvm.futex.wait <@i32> (@the_futex @I32_1)
        [%trap_no_sleep] TRAP <> KEEPALIVE(%rv)
        COMMINST @uvm.thread_exit
}

.global @the_other_futex <@i32>

.funcdef @futex_requeue_waiter VERSION @futex_requeue_waiter_v1 <@v_v> {
    %entry():
        %rv = COMMINST @uvm.futex.wait <@i32> (@the_futex @I32_0)
        [%trap_requeue_waiter] TRAP <> KEEPALIVE(%rv)
        COMMINST @uvm.thread_exit
}

.funcdef @futex_requeue_test VERSION @futex_requeue_test_v1 <@v_v> {
    %entry():
        STORE <@i32> @the_futex @I32_0
        STORE <@i32> @the_other_futex @I32_0

        %ns = COMMINST @uvm.new_stack <[@v_v]> (@futex_requeue_waiter)
        %nt = NEWTHREAD %ns PASS_VALUES <> ()

        %ns2 = COMMINST @uvm.new_stack <[@v_v]> (@futex_requeue_waiter)
        %nt2 = NEWTHREAD %ns2 PASS_VALUES <> ()

        BRANCH %wait_body(%nt %nt2)

    %wait_body(<@thread> %nt <@thread> %nt2):
        %rv = [%trap_wait] TRAP <@i32> KEEPALIVE (%nt %nt2)
        %is_1 = EQ <@i32> %rv @I32_1
        BRANCH2 %is_1 %wait_exit() %wait_body(%nt %nt2)

    %wait_exit():
        %nwakes = COMMINST @uvm.futex.cmp_requeue <@i32> (@the_futex @the_other_futex @I32_0 @I32_1)
        %nwakes2 = COMMINST @uvm.futex.wake <@i32> (@the_other_futex @I32_1)
        [%trap_setter] TRAP <> KEEPALIVE (%nwakes %nwakes2)
        COMMINST @uvm.thread_exit
}

.funcsig @futex_gc_waiter_sig = (@refi32) -> ()
.funcdef @futex_gc_waiter VERSION @futex_gc_waiter_v1 <@futex_gc_waiter_sig> {
    %entry(<@refi32> %ref):
        %ir = GETIREF <@i32> %ref
        %rv = COMMINST @uvm.futex.wait <@i32> (%ir @I32_0)
        [%trap_gc_waiter] TRAP <> KEEPALIVE(%rv)
        COMMINST @uvm.thread_exit
}

.funcdef @futex_with_gc VERSION @futex_with_gc_v1 <@v_v> {
    %entry():
        %obj = NEW <@i64>
        %ir = GETIREF <@i64> %obj
        STORE <@i32> %ir @I32_0

        %ns = COMMINST @uvm.new_stack <[@futex_gc_waiter_sig]> (@futex_gc_waiter)
        %nt = NEWTHREAD %ns PASS_VALUES <@refi32> (%obj)

        BRANCH %wait_body(%ir %nt)

    %wait_body(<@irefi64> %ir <@thread> %nt):
        %rv = [%trap_wait] TRAP <@i32> KEEPALIVE (%nt)
        %is_1 = EQ <@i32> %rv @I32_1
        BRANCH2 %is_1 %wait_exit(%ir) %wait_body(%ir %nt)

    %wait_exit(<@irefi64> %ir):
        [%trap_gc] TRAP <>

        %nwakes = COMMINST @uvm.futex.wake <@i32> (%ir @I32_1)
        [%trap_exit] TRAP <> KEEPALIVE (%nwakes)
        COMMINST @uvm.thread_exit
}
