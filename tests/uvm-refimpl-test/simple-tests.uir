// require primitives.uir

.funcdef @factorial_rec VERSION @factorial_rec_v1 <@i_i> (%n) {
    %entry:
        %zero = EQ <@i64> %n @I64_0
        BRANCH2 %zero %iszero %notzero
        
    %iszero:
        RET <@i64> @I64_1

    %notzero:
        %nm1 = SUB <@i64> %n @I64_1
        %rec = CALL <@i_i> @factorial_rec (%nm1)
        %result = MUL <@i64> %n %rec
        RET <@i64> %result
}

.funcdef @factorial_iter VERSION @factorial_iter_v1 <@i_i> (%n) {
    %entry:
        BRANCH %head

    %head:
        %i = PHI <@i64> { %entry: @I64_1; %next: %i2; }
        %prod = PHI <@i64> { %entry: @I64_1; %next: %prod2; }
        %cmp = SLE <@i64> %i %n
        BRANCH2 %cmp %body %exit

    %body:
        %prod2 = MUL <@i64> %prod %i
        %i2 = ADD <@i64> %i @I64_1
        BRANCH %next

    %next:
        BRANCH %head

    %exit:
        RET <@i64> %prod
}

.funcdef @factorial_tailrec VERSION @factorial_tailrec_v1 <@i_ii> (%n %prod) {
    %entry:
       %zero = EQ <@i64> %n @I64_1
        BRANCH2 %zero %iszero %notzero
        
    %iszero:
        RET <@i64> %prod

    %notzero:
        %nm1 = SUB <@i64> %n @I64_1
        %mul = MUL <@i64> %n %prod
        TAILCALL <@i_ii> @factorial_tailrec (%nm1 %mul)
}

.funcdef @test_fac VERSION @test_fac_v1 <@noparamsnoret> () {
    %entry:
        %r1 = CALL <@i_i> @factorial_rec (@I64_10)
        %r2 = CALL <@i_i> @factorial_iter (@I64_10)
        %r3 = CALL <@i_ii> @factorial_tailrec (@I64_10 @I64_1)
        %checktrap = TRAP <@void> KEEPALIVE (%r1 %r2 %r3)
        COMMINST @uvm.thread_exit
}

.funcdef @fibonacci_rec VERSION @fibonacci_rec_v1 <@i_i> (%n) {
    %entry:
        %zero = EQ <@i64> %n @I64_0
        BRANCH2 %zero %iszero %notzero
        
    %iszero:
        RET <@i64> @I64_0
        
    %notzero:
        %one = EQ <@i64> %n @I64_1
        BRANCH2 %one %isone %notone
        
    %isone:
        RET <@i64> @I64_1

    %notone:
        %nm1 = SUB <@i64> %n @I64_1
        %nm2 = SUB <@i64> %n @I64_2
        %rec1 = CALL <@i_i> @fibonacci_rec (%nm1)
        %rec2 = CALL <@i_i> @fibonacci_rec (%nm2)
        %result = ADD <@i64> %rec1 %rec2
        RET <@i64> %result
}

// M(n) = [F_{n+1} F_n  ;
//         F_n     F_{n-1} ]
//      = M(1) ^ n
// M(1) = [1 1;
//         1 0]
// M(0) = [1 0;
//         0 1]
.funcdef @fibonacci_mat VERSION @fibonacci_mat_v1 <@i_i> (%n) {
    %entry:
        BRANCH %head
        
    %head:
        %a = PHI <@i64> { %entry: @I64_1; %next: %a2; }
        %b = PHI <@i64> { %entry: @I64_1; %next: %b2; }
        %c = PHI <@i64> { %entry: @I64_1; %next: %c2; }
        %d = PHI <@i64> { %entry: @I64_0; %next: %d2; }
        %aa = PHI <@i64> { %entry: @I64_1; %next: %aa2; }
        %bb = PHI <@i64> { %entry: @I64_0; %next: %bb2; }
        %cc = PHI <@i64> { %entry: @I64_0; %next: %cc2; }
        %dd = PHI <@i64> { %entry: @I64_1; %next: %dd2; }
        %nn = PHI <@i64> { %entry: %n; %next: %nn2; }
        %watch = TRAP <@void> KEEPALIVE (%a %b %c %d %aa %bb %cc %dd %nn)
        %nn0 = EQ <@i64> %nn @I64_0
        BRANCH2 %nn0 %exit %body
        
    %body:
        %nnm2 = AND <@i64> %nn @I64_1
        %nodd = EQ <@i64> %nnm2 @I64_1
        BRANCH2 %nodd %odd %even

    %odd:
        %aa_a = MUL <@i64> %aa %a
        %bb_c = MUL <@i64> %bb %c
        %aa_b = MUL <@i64> %aa %b
        %bb_d = MUL <@i64> %bb %d
        %cc_a = MUL <@i64> %cc %a
        %dd_c = MUL <@i64> %dd %c
        %cc_b = MUL <@i64> %cc %b
        %dd_d = MUL <@i64> %dd %d

        %aa3 = ADD <@i64> %aa_a %bb_c
        %bb3 = ADD <@i64> %aa_b %bb_d
        %cc3 = ADD <@i64> %cc_a %dd_c
        %dd3 = ADD <@i64> %cc_b %dd_d
        BRANCH %next
        
    %even:
        BRANCH %next
        
    %next:
        %aa2 = PHI <@i64> { %odd: %aa3; %even: %aa; }
        %bb2 = PHI <@i64> { %odd: %bb3; %even: %bb; }
        %cc2 = PHI <@i64> { %odd: %cc3; %even: %cc; }
        %dd2 = PHI <@i64> { %odd: %dd3; %even: %dd; }
        
        %a_a = MUL <@i64> %a %a
        %a_b = MUL <@i64> %a %b
        %a_c = MUL <@i64> %a %c
        %b_c = MUL <@i64> %b %c
        %b_d = MUL <@i64> %b %d
        %c_d = MUL <@i64> %c %d
        %d_d = MUL <@i64> %d %d
        %a2 = ADD <@i64> %a_a %b_c
        %b2 = ADD <@i64> %a_b %b_d
        %c2 = ADD <@i64> %a_c %c_d
        %d2 = ADD <@i64> %b_c %d_d
        %nn2 = ASHR <@i64> %nn @I64_1
        BRANCH %head
        
    %exit:
        RET <@i64> %bb
}

.funcdef @test_fib VERSION @test_fib_v1 <@noparamsnoret> () {
    %entry:
        %r1 = CALL <@i_i> @fibonacci_rec (@I64_10)
        %r2 = CALL <@i_i> @fibonacci_mat (@I64_10)
        %checktrap = TRAP <@void> KEEPALIVE (
                        %r1
                        %r2
                        )
        COMMINST @uvm.thread_exit
}
