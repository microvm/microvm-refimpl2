.typedef @i1 = int<1>
.typedef @i6 = int<6>
.typedef @i8 = int<8>
.typedef @i16 = int<16>
.typedef @i32 = int<32>
.typedef @i52 = int<52>
.typedef @i64 = int<64>
.typedef @float = float
.typedef @double = double

.typedef @void = void

.funcsig @noparamsnoret = @void ()

.typedef @funcdumb = func<@noparamsnoret>

.typedef @thread = thread
.typedef @stack = stack
.typedef @tagref64 = tagref64

.const @TRUE <@i64> = 1
.const @FALSE <@i64> = 0

.const @I32_0 <@i32> = 0
.const @I32_1 <@i32> = 1
.const @I32_2 <@i32> = 2
.const @I32_3 <@i32> = 3
.const @I32_4 <@i32> = 4
.const @I32_5 <@i32> = 5
.const @I32_6 <@i32> = 6
.const @I32_7 <@i32> = 7

.const @I64_0 <@i64> = 0
.const @I64_1 <@i64> = 1
.const @I64_2 <@i64> = 2
.const @I64_3 <@i64> = 3
.const @I64_4 <@i64> = 4
.const @I64_5 <@i64> = 5
.const @I64_6 <@i64> = 6
.const @I64_7 <@i64> = 7

.const @F_0 <@float> = 0.0f
.const @F_1 <@float> = 1.0f
.const @F_2 <@float> = 2.0f
.const @F_3 <@float> = 3.0f
.const @F_4 <@float> = 4.0f
.const @F_5 <@float> = 5.0f
.const @F_6 <@float> = 6.0f
.const @F_7 <@float> = 7.0f

.const @D_0 <@double> = 0.0d
.const @D_1 <@double> = 1.0d
.const @D_2 <@double> = 2.0d
.const @D_3 <@double> = 3.0d
.const @D_4 <@double> = 4.0d
.const @D_5 <@double> = 5.0d
.const @D_6 <@double> = 6.0d
.const @D_7 <@double> = 7.0d

.typedef @4xfloat  = vector <@float 4>
.typedef @4xi32    = vector <@i32 4>
.typedef @2xdouble = vector <@double 2>

.const @4xI32_V1 <@4xi32> = VEC {@I32_0 @I32_1 @I32_2 @I32_3}
.const @4xI32_V2 <@4xi32> = VEC {@I32_4 @I32_5 @I32_6 @I32_7}

.const @4xF_V1 <@4xfloat> = VEC {@F_0 @F_1 @F_2 @F_3}
.const @4xF_V2 <@4xfloat> = VEC {@F_4 @F_5 @F_6 @F_7}

.const @2xD_V1 <@2xdouble> = VEC {@D_0 @D_1}
.const @2xD_V2 <@2xdouble> = VEC {@D_2 @D_3}

.funcsig @i_i = @i64 (@i64)
.funcsig @i_ii = @i64 (@i64 @i64)

.typedef @refvoid = ref<@void>
.typedef @irefvoid = iref<@void>
.typedef @weakrefvoid = weakref<@void>
.const @NULLREF   <@refvoid>  = NULL
.const @NULLIREF  <@irefvoid> = NULL
.const @NULLFUNC  <@funcdumb> = NULL
.const @NULLSTACK <@stack>    = NULL

.typedef @refi8     = ref<@i8>
.typedef @refi16    = ref<@i16>
.typedef @refi32    = ref<@i32>
.typedef @refi64    = ref<@i64>
.typedef @reffloat  = ref<@float>
.typedef @refdouble = ref<@double>
.typedef @irefi8    = iref<@i8>
.typedef @irefi16   = iref<@i16>
.typedef @irefi32   = iref<@i32>
.typedef @irefi64   = iref<@i64>
.typedef @ireffloat = iref<@float>
.typedef @irefdouble= iref<@double>
.const @NULLREF_I64  <@refi64>  = NULL
.const @NULLIREF_I64 <@irefi64> = NULL

.typedef @ptrvoid   = ptr<@void>
.typedef @ptri8     = ptr<@i8>
.typedef @ptri16    = ptr<@i16>
.typedef @ptri32    = ptr<@i32>
.typedef @ptri64    = ptr<@i64>
.typedef @ptrfloat  = ptr<@float>
.typedef @ptrdouble = ptr<@double>
.typedef @ptrptrvoid = ptr<@ptrvoid>
.typedef @ptrfpnoparamsnoret = ptr<@fpnoparamsnoret>
.typedef @ptrfpi_i  = ptr<@fpi_i>

.typedef @fpnoparamsnoret = funcptr<@noparamsnoret>
.typedef @fpi_i = funcptr<@i_i>
.typedef @fpi_ii = funcptr<@i_ii>

.funcsig @v_a = @void (@i64)

.funcsig @getpid_sig = @i32 ()
.typedef @getpid_fp  = funcptr<@getpid_sig>

.funcdef @getpidtest VERSION @getpidtest_v1 <@v_a> (%p0) {
    %entry:
        %fp = PTRCAST <@i64 @getpid_fp> %p0
        %rv = CCALL #DEFAULT <@getpid_fp @getpid_sig> %fp ()

        %trap = TRAP <@void> KEEPALIVE (%fp %rv)
        COMMINST @uvm.thread_exit
}

.typedef @size_t = int<64>
.funcsig @write_sig = @size_t (@i32 @ptrvoid @size_t)
.typedef @write_fp  = funcptr<@write_sig>

.typedef @CharBuf = hybrid<@i64 @i8>
.const @I8_H  <@i8> = 0x48
.const @I8_e  <@i8> = 0x65
.const @I8_l  <@i8> = 0x6c
.const @I8_o  <@i8> = 0x6f
.const @I8_NL <@i8> = 0x0a

.funcsig @writetest_sig = @void (@write_fp)
.funcdef @writetest VERSION @writetest_v1 <@writetest_sig> (%fp) {
    %entry:
        %buf = NEWHYBRID <@CharBuf @i64> @I64_6
        %buf_i = GETIREF <@CharBuf> %buf
        %buf_v0 = GETVARPARTIREF <@CharBuf> %buf_i
        STORE <@i8> %buf_v0 @I8_H
        %buf_v1 = SHIFTIREF <@i8 @i64> %buf_v0 @I64_1
        STORE <@i8> %buf_v1 @I8_e
        %buf_v2 = SHIFTIREF <@i8 @i64> %buf_v1 @I64_1
        STORE <@i8> %buf_v2 @I8_l
        %buf_v3 = SHIFTIREF <@i8 @i64> %buf_v2 @I64_1
        STORE <@i8> %buf_v3 @I8_l
        %buf_v4 = SHIFTIREF <@i8 @i64> %buf_v3 @I64_1
        STORE <@i8> %buf_v4 @I8_o
        %buf_v5 = SHIFTIREF <@i8 @i64> %buf_v4 @I64_1
        STORE <@i8> %buf_v5 @I8_NL

        %buf_v0_p = COMMINST @uvm.native.pin <@irefi8> (%buf_v0)
        %buf_v0_pv = PTRCAST <@ptri8 @ptrvoid> %buf_v0_p

        %rv = CCALL #DEFAULT <@write_fp @write_sig> %fp (@I32_1 %buf_v0_pv @I64_6)

        COMMINST @uvm.native.unpin <@irefi8> (%buf_v0)

        %trap = TRAP <@void> KEEPALIVE (%fp %rv %buf %buf_v0_p)
        COMMINST @uvm.thread_exit
}

.funcsig @memcpy_sig = @ptrvoid (@ptrvoid @ptrvoid @size_t)
.typedef @memcpy_fp  = funcptr<@write_sig>

.global @FP_MEMCPY <@memcpy_fp>

.funcdef @memcpytest VERSION @memcpytest_v1 <@noparamsnoret> () {
    %entry:
        %fp = LOAD <@memcpy_fp> @FP_MEMCPY

        %buf = NEWHYBRID <@CharBuf @i64> @I64_6
        %buf_i = GETIREF <@CharBuf> %buf
        %buf_v0 = GETVARPARTIREF <@CharBuf> %buf_i
        STORE <@i8> %buf_v0 @I8_H
        %buf_v1 = SHIFTIREF <@i8 @i64> %buf_v0 @I64_1
        STORE <@i8> %buf_v1 @I8_e
        %buf_v2 = SHIFTIREF <@i8 @i64> %buf_v1 @I64_1
        STORE <@i8> %buf_v2 @I8_l
        %buf_v3 = SHIFTIREF <@i8 @i64> %buf_v2 @I64_1
        STORE <@i8> %buf_v3 @I8_l
        %buf_v4 = SHIFTIREF <@i8 @i64> %buf_v3 @I64_1
        STORE <@i8> %buf_v4 @I8_o
        %buf_v5 = SHIFTIREF <@i8 @i64> %buf_v4 @I64_1
        STORE <@i8> %buf_v5 @I8_NL

        %buf2 = NEWHYBRID <@CharBuf @i64> @I64_6
        %buf2_i = GETIREF <@CharBuf> %buf2
        %buf2_v0 = GETVARPARTIREF <@CharBuf> %buf2_i

        %buf_v0_p = COMMINST @uvm.native.pin <@irefi8> (%buf_v0)
        %buf_v0_pv = PTRCAST <@ptri8 @ptrvoid> %buf_v0_p
        %buf2_v0_p = COMMINST @uvm.native.pin <@irefi8> (%buf2_v0)
        %buf2_v0_pv = PTRCAST <@ptri8 @ptrvoid> %buf2_v0_p

        %rv = CCALL #DEFAULT <@memcpy_fp @memcpy_sig> %fp (%buf2_v0_pv %buf_v0_pv @I64_6)

        COMMINST @uvm.native.unpin <@irefi8> (%buf2_v0)
        COMMINST @uvm.native.unpin <@irefi8> (%buf_v0)

        %buf2_0 = LOAD <@i8> %buf2_v0
        %buf2_v1 = SHIFTIREF <@i8 @i64> %buf2_v0 @I64_1
        %buf2_1 = LOAD <@i8> %buf2_v1
        %buf2_v2 = SHIFTIREF <@i8 @i64> %buf2_v1 @I64_1
        %buf2_2 = LOAD <@i8> %buf2_v2
        %buf2_v3 = SHIFTIREF <@i8 @i64> %buf2_v2 @I64_1
        %buf2_3 = LOAD <@i8> %buf2_v3
        %buf2_v4 = SHIFTIREF <@i8 @i64> %buf2_v3 @I64_1
        %buf2_4 = LOAD <@i8> %buf2_v4
        %buf2_v5 = SHIFTIREF <@i8 @i64> %buf2_v4 @I64_1
        %buf2_5 = LOAD <@i8> %buf2_v5

        %trap = TRAP <@void> KEEPALIVE (%fp %rv %buf2_v0_p %buf2_0 %buf2_1 %buf2_2 %buf2_3 %buf2_4 %buf2_5)
        COMMINST @uvm.thread_exit
}

.typedef @struct_foo = struct<@i64 @i32 @i16 @i8>
.typedef @struct_bar = struct<@ptrvoid @fpnoparamsnoret>
.typedef @struct_baz1 = struct<@float @i32>
.typedef @struct_baz = struct<@struct_baz1 @double>

.typedef @irefstruct_baz = iref<@struct_baz>
.typedef @ptrstruct_baz = ptr<@struct_baz>

.funcsig @foo_func_sig = @void (@struct_foo @ptri64 @ptri32 @ptri16 @ptri8)
.funcsig @bar_func_sig = @void (@struct_bar @ptrptrvoid @ptrfpnoparamsnoret)
.funcsig @baz_func_sig = @struct_baz (@struct_baz @ptrfloat @ptri32 @ptrdouble @ptrstruct_baz)
.typedef @foo_func_fp = funcptr<@foo_func_sig>
.typedef @bar_func_fp = funcptr<@bar_func_sig>
.typedef @baz_func_fp = funcptr<@baz_func_sig>

.const @I64BIG <@i64> = 0x55aa55aa55aa55aa
.const @I32BIG <@i32> = 0x5a5a5a5a
.const @I16BIG <@i16> = 0xa5a5
.const @I8BIG  <@i8 > = 0x61

.const @o_foo <@struct_foo> = {@I64BIG @I32BIG @I16BIG @I8BIG}

.funcdef @foo_func_test VERSION @foo_func_test_v1 <@v_a> (%p0) {
    %entry:
        %fp = PTRCAST <@i64 @foo_func_fp> %p0

        %aa = ALLOCA <@i64>
        %ab = ALLOCA <@i32>
        %ac = ALLOCA <@i16>
        %ad = ALLOCA <@i8>
        %pa = COMMINST @uvm.native.pin <@irefi64> (%aa)
        %pb = COMMINST @uvm.native.pin <@irefi32> (%ab)
        %pc = COMMINST @uvm.native.pin <@irefi16> (%ac)
        %pd = COMMINST @uvm.native.pin <@irefi8 > (%ad)

        %rv = CCALL #DEFAULT <@foo_func_fp @foo_func_sig> %fp (@o_foo %pa %pb %pc %pd)

        COMMINST @uvm.native.unpin <@irefi8 > (%ad)
        COMMINST @uvm.native.unpin <@irefi16> (%ac)
        COMMINST @uvm.native.unpin <@irefi32> (%ab)
        COMMINST @uvm.native.unpin <@irefi64> (%aa)

        %a = LOAD <@i64> %aa
        %b = LOAD <@i64> %ab
        %c = LOAD <@i64> %ac
        %d = LOAD <@i64> %ad

        %trap = TRAP <@void> KEEPALIVE (%fp %rv %a %b %c %d)
        COMMINST @uvm.thread_exit
}

.const @o_bar_a <@ptrvoid> = 0x123456789abcdef0 
.const @o_bar_b <@fpnoparamsnoret> = 0xfedcba9876543210
.const @o_bar <@struct_bar> = {@o_bar_a @o_bar_b}
.typedef @irefptrvoid = iref<@ptrvoid>
.typedef @ireffpnoparamsnoret = iref<@fpnoparamsnoret>

.funcdef @bar_func_test VERSION @bar_func_test_v1 <@v_a> (%p0) {
    %entry:
        %fp = PTRCAST <@i64 @bar_func_fp> %p0

        %aa = ALLOCA <@ptrvoid>
        %ab = ALLOCA <@fpnoparamsnoret>
        %pa = COMMINST @uvm.native.pin <@irefptrvoid> (%aa)
        %pb = COMMINST @uvm.native.pin <@ireffpnoparamsnoret> (%ab)

        %rv = CCALL #DEFAULT <@bar_func_fp @bar_func_sig> %fp (@o_bar %pa %pb)

        COMMINST @uvm.native.unpin <@ireffpnoparamsnoret> (%ab)
        COMMINST @uvm.native.unpin <@irefptrvoid> (%aa)

        %a = LOAD <@ptrvoid> %aa
        %b = LOAD <@fpnoparamsnoret> %ab

        %trap = TRAP <@void> KEEPALIVE (%fp %rv %a %b)
        COMMINST @uvm.thread_exit
}

.const @o_baz_a <@struct_baz1> = {@F_1 @I32_2}
.const @o_baz <@struct_baz> = {@o_baz_a @D_3}

.funcdef @baz_func_test VERSION @baz_func_test_v1 <@v_a> (%p0) {
    %entry:
        %fp = PTRCAST <@i64 @baz_func_fp> %p0

        %aa = ALLOCA <@float>
        %ab = ALLOCA <@i32>
        %ac = ALLOCA <@double>
        %aextra = ALLOCA <@struct_baz>
        %pa = COMMINST @uvm.native.pin <@ireffloat> (%aa)
        %pb = COMMINST @uvm.native.pin <@irefi32> (%ab)
        %pc = COMMINST @uvm.native.pin <@irefdouble> (%ac)
        %pextra = COMMINST @uvm.native.pin <@irefstruct_baz> (%aextra)

        %rv = CCALL #DEFAULT <@baz_func_fp @baz_func_sig> %fp (@o_baz %pa %pb %pc %pextra)

        COMMINST @uvm.native.unpin <@irefdouble> (%ac)
        COMMINST @uvm.native.unpin <@irefi32> (%ab)
        COMMINST @uvm.native.unpin <@ireffloat> (%aa)

        %a = LOAD <@float> %aa
        %b = LOAD <@i32> %ab
        %c = LOAD <@double> %ac

        %trap = TRAP <@void> KEEPALIVE (%fp %rv %a %b %c %pextra %aextra)

        COMMINST @uvm.native.unpin <@irefstruct_baz> (%aextra)

        COMMINST @uvm.thread_exit
}
